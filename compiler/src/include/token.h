#ifndef TOKEN_H
#define TOKEN_H

#include <stdio.h>
#include <stdlib.h>

struct TOKEN{

	char* value;
	enum{
		TOKEN_TYPE_BYTE,
		TOKEN_TYPE_WORD,
		TOKEN_TYPE_DWORD,
		TOKEN_TYPE_QWORD,
		TOKEN_TYPE_INTEGER,
		TOKEN_TYPE_FLOAT,
		TOKEN_TYPE_STRING,
		TOKEN_TYPE_OBJECT,
		TOKEN_TYPE_IDENTIFIER,
		TOKEN_TYPE_IF,
		TOKEN_TYPE_ELSE,
		TOKEN_TYPE_ENDIF,
		TOKEN_TYPE_WHILE,
		TOKEN_TYPE_ENDWHILE,
		TOKEN_TYPE_FUNC,
		TOKEN_TYPE_ENDFUNC,
		TOKEN_TYPE_RETURN,
		TOKEN_TYPE_LBRACE,
		TOKEN_TYPE_RBRACE,
		TOKEN_TYPE_LCBRACE,
		TOKEN_TYPE_RCBRACE,
		TOKEN_TYPE_LSBRACE,
		TOKEN_TYPE_RSBRACE,
		TOKEN_TYPE_EQUALS,
		TOKEN_TYPE_CONDEQU,
		TOKEN_TYPE_NEQUALS,
		TOKEN_TYPE_LESS,
		TOKEN_TYPE_MORE,
		TOKEN_TYPE_LESSEQU,
		TOKEN_TYPE_MOREEQU,
		TOKEN_TYPE_NOT,
		TOKEN_TYPE_AND,
		TOKEN_TYPE_OR,
		TOKEN_TYPE_BITAND,
		TOKEN_TYPE_ANDEQU,
		TOKEN_TYPE_BITOR,
		TOKEN_TYPE_OREQU,
		TOKEN_TYPE_LBITSHIFT,
		TOKEN_TYPE_RBITSHIFT,
		TOKEN_TYPE_EOF,
		TOKEN_TYPE_PLUS,
		TOKEN_TYPE_MINUS,
		TOKEN_TYPE_MULTIPLY,
		TOKEN_TYPE_DIVIDE,
		TOKEN_TYPE_PLUSEQU,
		TOKEN_TYPE_MINUSEQU,
		TOKEN_TYPE_MULTIPLYEQU,
		TOKEN_TYPE_DIVIDEEQU,
		TOKEN_TYPE_KOMMA,
		TOKEN_TYPE_INCREMENT,
		TOKEN_TYPE_DECREMENT,
		TOKEN_TYPE_SQUARED,
		TOKEN_TYPE_SQUAREROOT,
		TOKEN_TYPE_BITNOT,
		TOKEN_TYPE_BITNOTEQU,
		TOKEN_TYPE_UNKNOWN
	}type;
};

struct TOKEN* createToken(char* value, unsigned char type);
char* tok_to_str(struct TOKEN* token);

#endif
